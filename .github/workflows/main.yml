name: CI/CD Pipeline for React App to AWS EKS

on: 
  push:
    branches: ['master' , 'main']
  pull_request:
    branches: [ "master" , 'main']

permissions: 
    contents: write   
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}  
  AWS_DEFAULT_REGION: "us-east-1"    

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [16]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js manually
        run: |
          # Ensure Node.js 16 is available on PATH
          node -v
          npm -v
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build

  push-docker-image:
    name: Build Docker image and push to repositories
    runs-on: self-hosted
    needs: ['build']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - run: docker build -t lordtam123/react-app:latest --no-cache .
      - run: docker push lordtam123/react-app:latest  

  provision-aws-eks-cluster:
    runs-on: self-hosted
    needs: ['build', 'push-docker-image']
    steps:
      - name: AWS EKS Deployment
        uses: actions/checkout@v4
 
      - name: Create eks cluster
        run: eksctl create cluster --region us-east-1 --name demo-cluster --nodegroup-name node-group1 --node-type t2.micro --nodes 4
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_ACCESS_KEY }}
        
  deploy:
    runs-on: self-hosted
    needs: ['build', 'push-docker-image', 'provision-aws-eks-cluster']
    steps:
      - name: AWS EKS Deployment
        uses: actions/checkout@v4

      - name: Pull the Docker image
        run: docker pull lordtam123/react-app:latest

      - name: Update kubeconfig
        run: aws eks --region us-east-1 update-kubeconfig --name demo-cluster
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}
    
      - name: Apply deployment
        run: kubectl apply -f deployment.yml
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}

      - name: Expose service
        run: kubectl expose deployment nginx-testing --type=LoadBalancer --name=nginx-testing
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}

      - name: Load Balancer DNS
        run: kubectl get services my-service 
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION}}
